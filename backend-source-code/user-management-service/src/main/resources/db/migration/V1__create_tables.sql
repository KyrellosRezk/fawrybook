-- ==============================================
-- Create UUID-OSSP extension if not exists
-- ==============================================
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ==============================================
-- CREATE BASIC_DATA SCHEMA IF NOT EXISTS
-- ==============================================
CREATE SCHEMA IF NOT EXISTS BASIC_DATA;

-- ==============================================
-- CREATE USER_MANAGEMENT SCHEMA IF NOT EXISTS
-- ==============================================
CREATE SCHEMA IF NOT EXISTS USER_MANAGEMENT;

-- ==============================================
-- CREATE AUTH SCHEMA IF NOT EXISTS
-- ==============================================
CREATE SCHEMA IF NOT EXISTS AUTH;

-- ==============================================
-- CREATE INDUSTRY TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS BASIC_DATA.INDUSTRY(
    ID VARCHAR(255) PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL UNIQUE
);

-- ==============================================
-- CREATE POSITION TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS BASIC_DATA.POSITION(
    ID VARCHAR(255) PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL UNIQUE,
    INDUSTRY_ID VARCHAR(255) NOT NULL,
    CONSTRAINT FK_POSITION_INDUSTRY
      FOREIGN KEY (INDUSTRY_ID) REFERENCES BASIC_DATA.INDUSTRY(ID)
);

-- ==============================================
-- CREATE GOVERNORATE TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS BASIC_DATA.GOVERNORATE(
    ID VARCHAR(255) PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL UNIQUE
);

-- ==============================================
-- CREATE USER TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS USER_MANAGEMENT.USER (
    ID VARCHAR(255) PRIMARY KEY,
    USERNAME VARCHAR(255) NOT NULL UNIQUE,
    FIRST_NAME VARCHAR(255) NOT NULL,
    MIDDLE_NAME VARCHAR(255) NOT NULL,
    LAST_NAME VARCHAR(255) NOT NULL,
    PHONE_NUMBER VARCHAR(20) NOT NULL UNIQUE,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    LNG NUMERIC,
    LAT NUMERIC,
    GOVERNORATE_ID VARCHAR(255) NOT NULL,
    ROLE VARCHAR(255) NOT NULL,
    STATUS VARCHAR(255) NOT NULL,
    POSITION_ID VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    DELETED_AT TIMESTAMP,
    CONSTRAINT FK_USER_POSITION
       FOREIGN KEY (POSITION_ID) REFERENCES BASIC_DATA.POSITION(ID),
    CONSTRAINT FK_USER_GOVERNORATE
       FOREIGN KEY (GOVERNORATE_ID) REFERENCES BASIC_DATA.GOVERNORATE(ID)
);

-- ==============================================
-- CREATE FOLLOWING TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS USER_MANAGEMENT.FOLLOWING (
    FOLLOWER_ID VARCHAR(255),
    FOLLOWED_ID VARCHAR(255),
    CONSTRAINT FK_FOLLOWING_FOLLOWER_ID
        FOREIGN KEY (FOLLOWER_ID) REFERENCES USER_MANAGEMENT.USER(ID),
    CONSTRAINT FK_FOLLOWING_FOLLOWED_ID
        FOREIGN KEY (FOLLOWED_ID) REFERENCES USER_MANAGEMENT.USER(ID)
);

-- ==============================================
-- CREATE FOLLOWING_REQUEST TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS USER_MANAGEMENT.FOLLOWING_REQUEST (
    SENDER_ID VARCHAR(255),
    RECEIVER_ID VARCHAR(255),
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_FOLLOWING_REQUEST_SENDER_ID
      FOREIGN KEY (SENDER_ID) REFERENCES USER_MANAGEMENT.USER(ID),
    CONSTRAINT FK_FOLLOWING_REQUEST_RECEIVER_ID
      FOREIGN KEY (RECEIVER_ID) REFERENCES USER_MANAGEMENT.USER(ID)
);

-- ==============================================
-- CREATE USER_CREDENTIALS TABLE
-- ==============================================
CREATE TABLE IF NOT EXISTS AUTH.USER_CREDENTIAL (
    ID VARCHAR(255) PRIMARY KEY,
    USER_ID VARCHAR(255) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    REFRESH_TOKEN VARCHAR(1000),
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    CONSTRAINT FK_USER_CREDENTIAL_USER_ID
        FOREIGN KEY (USER_ID) REFERENCES USER_MANAGEMENT.USER(ID)
);